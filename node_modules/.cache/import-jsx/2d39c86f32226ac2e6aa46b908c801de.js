"use strict";

const React = require("react");
const {
  useEffect,
  useState,
  useRef
} = require("react");
const {
  Text,
  Box,
  measureElement,
  Newline,
  Spacer
} = require("ink");
const Renderer = require("./components/Divider");
const Gradient = require("ink-gradient");
const BigText = require("ink-big-text");
const importJsx = require("import-jsx");
const Selector = importJsx("./Selector.js");
const Logo = importJsx("./components/Logo");
const gitBranchCall = require("./currentBranch");
const gitStatusPull = require('./actions/gitStatusPull');
const gitStatusProcess = require('./actions/gitStatusProcess');
const gitBranchVisualPull = require('./actions/gitBranchVisualPull');
const gitBranchVisualProcess = require('./actions/gitBranchVisualProcess');
const {
  showLogo,
  defaultColor,
  accentColor,
  gitTreeColor,
  appResize,
  changeBold,
  changeBorder
} = require('./styleFile');
const App = () => {
  const [status, setStatus] = useState("");
  const [branch, setBranch] = useState("");
  const [visual, setVisual] = useState("");
  const [appWidth, setWidth] = useState(null);
  const [treeHeight, setTreeHeight] = useState(null);
  const [appheight, setHeight] = useState("50");
  const ref = useRef(null);
  useEffect(() => {
    const intervalStatusCheck = setInterval(() => {
      setStatus(gitStatusPull());
      setBranch(gitBranchCall());
      setVisual(gitBranchVisualPull());
      if (appResize) {
        setHeight(process.stdout.rows);
      }
      const {
        width,
        height
      } = measureElement(ref.current);
      setWidth(width);
      setTreeHeight(height);
    }, 1000);
    if (!appResize) {
      setHeight(process.stdout.rows);
    }
    return () => {
      clearInterval(intervalStatusCheck);
    };
  }, []);
  const statusProcessed = gitStatusProcess(status);
  const visualProcessed = gitBranchVisualProcess(visual, treeHeight, appWidth);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    minHeight: appheight
  }, showLogo && /*#__PURE__*/React.createElement(Logo, null), /*#__PURE__*/React.createElement(Box, {
    borderStyle: changeBorder //HERE IS THE CURRENT BORDER TO CHANGE
    ,
    borderColor: accentColor,
    className: "full-app",
    height: 20,
    flexGrow: 1
  }, /*#__PURE__*/React.createElement(Box, {
    className: "left-box",
    width: "50%",
    height: "100%",
    flexDirection: "column",
    ref: ref
    // flexGrow={1}
  }, /*#__PURE__*/React.createElement(Box, {
    className: "changed-files",
    height: "50%"
  }, /*#__PURE__*/React.createElement(Box, {
    height: "100%"
  }, /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "flex-start"
  }, /*#__PURE__*/React.createElement(Text, {
    color: accentColor,
    bold: true,
    underline: true
  }, "Unstaged Changes"), statusProcessed.unstaged.map(file => /*#__PURE__*/React.createElement(Box, {
    alignItems: "flex-start",
    key: file
  }, /*#__PURE__*/React.createElement(Text, {
    color: defaultColor
  }, file)))))), /*#__PURE__*/React.createElement(Text, {
    color: accentColor
  }, /*#__PURE__*/React.createElement(Newline, null), /*#__PURE__*/React.createElement(Renderer, {
    width: appWidth
  })), /*#__PURE__*/React.createElement(Box, {
    className: "stage-area",
    height: "50%"
  }, /*#__PURE__*/React.createElement(Box, {
    height: "100%"
  }, /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "flex-start"
  }, /*#__PURE__*/React.createElement(Text, {
    color: accentColor,
    bold: true,
    underline: true
  }, "Staged Changes"), statusProcessed.staged.map(file => /*#__PURE__*/React.createElement(Box, {
    alignItems: "flex-start",
    key: file
  }, /*#__PURE__*/React.createElement(Text, {
    color: defaultColor
  }, file))))))), /*#__PURE__*/React.createElement(Box, {
    className: "gitBranch",
    borderStyle: changeBorder //ALSO HERE
    ,
    borderColor: accentColor,
    className: "left-box",
    width: "65%",
    margin: "-1",
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, /*#__PURE__*/React.createElement(Text, {
    color: accentColor,
    bold: true,
    underline: true
  }, "Git Branch --", ">"), /*#__PURE__*/React.createElement(Text, {
    color: defaultColor
  }, " ", branch), /*#__PURE__*/React.createElement(Spacer, null), /*#__PURE__*/React.createElement(Text, {
    color: defaultColor
  }, "Newest to Oldest ")), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, /*#__PURE__*/React.createElement(Text, {
    color: gitTreeColor,
    bold: changeBold
  }, visualProcessed.sorted), /*#__PURE__*/React.createElement(Text, null, " ")))), /*#__PURE__*/React.createElement(Selector, {
    defaultColor: defaultColor,
    accentColor: accentColor
  }), /*#__PURE__*/React.createElement(Newline, null));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,