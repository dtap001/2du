const React = require("react");
const {
  useEffect,
  useState
} = require("react");
const {
  Text,
  Box,
  Newline,
  useFocus,
  useFocusManager
} = require("ink");
// const SelectInput = require("ink-select-input").default;
const SelectInput = require("ink-select-input-horizontal").default;
const {
  execSync,
  exec
} = require("child_process");
const StageChanges = ({
  refreshTab,
  accentColor,
  defaultColor
}) => {
  //Stages/unstages changes
  const [gitStatus, setStatus] = useState('');
  const {
    isFocused
  } = useFocus();
  useEffect(() => {
    let gitStatusOutput = execSync("git status -s", (error, stdout, stderr) => {
      if (error) {
        console.error(`exec error: ${error}`);
        return;
      }
      return stdout;
    }).toString();
    setStatus(gitStatusOutput);
  });
  const filesList = [{
    label: 'STAGE/UNSTAGE (all files)',
    value: 'STAGE/UNSTAGE (all files)'
  }];
  gitStatus.split("\n").forEach((file, i) => {
    if (file.length) {
      if (file.includes(' -> ')) {
        const files = file.slice(3).split(' -> ').forEach((innerfile, j) => {
          filesList.push({
            label: innerfile,
            value: i + j * .1
          });
        });
      } else {
        filesList.push({
          label: file.slice(3),
          value: i
        });
      }
    }
  });
  const handleSelect = item => {
    if (item.label === 'STAGE/UNSTAGE (all files)') {
      let gitAllFilesStatus = execSync(`git status -s`, (error, stdout, stderr) => {
        if (error) {
          console.error(`exec error: ${error}`);
          return;
        }
        return stdout;
      }).toString().split("\n");
      const someUnstagedFiles = gitAllFilesStatus.reduce((prev, status) => {
        return prev || status.length && status.slice(1, 2) !== ' ';
      }, false);
      if (someUnstagedFiles) {
        execSync(`git add .`);
      } else {
        execSync('git restore --staged .');
      }
    } else {
      let gitFileStatus = execSync(`git status -s ${item.label}`, (error, stdout, stderr) => {
        if (error) {
          console.error(`exec error: ${error}`);
          return;
        }
        return stdout;
      }).toString().slice(0, 1);
      if (gitFileStatus === 'M' || gitFileStatus === 'A' || gitFileStatus === 'R' || gitFileStatus === 'D') {
        execSync(`git restore --staged ${item.label}`);
      } else {
        execSync(`git add ${item.label}`);
      }
    }
  };
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    marginLeft: "3"
  }, /*#__PURE__*/React.createElement(SelectInput, {
    displayDirection: "column",
    items: filesList,
    onSelect: handleSelect,
    defaultColor: defaultColor,
    accentColor: accentColor
  }), /*#__PURE__*/React.createElement(Newline, null), /*#__PURE__*/React.createElement(Text, {
    color: "gray"
  }, "Press ESC to go back"));
};
module.exports = StageChanges;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsIlRleHQiLCJCb3giLCJOZXdsaW5lIiwidXNlRm9jdXMiLCJ1c2VGb2N1c01hbmFnZXIiLCJTZWxlY3RJbnB1dCIsImRlZmF1bHQiLCJleGVjU3luYyIsImV4ZWMiLCJTdGFnZUNoYW5nZXMiLCJyZWZyZXNoVGFiIiwiYWNjZW50Q29sb3IiLCJkZWZhdWx0Q29sb3IiLCJnaXRTdGF0dXMiLCJzZXRTdGF0dXMiLCJpc0ZvY3VzZWQiLCJnaXRTdGF0dXNPdXRwdXQiLCJlcnJvciIsInN0ZG91dCIsInN0ZGVyciIsImNvbnNvbGUiLCJ0b1N0cmluZyIsImZpbGVzTGlzdCIsImxhYmVsIiwidmFsdWUiLCJzcGxpdCIsImZvckVhY2giLCJmaWxlIiwiaSIsImxlbmd0aCIsImluY2x1ZGVzIiwiZmlsZXMiLCJzbGljZSIsImlubmVyZmlsZSIsImoiLCJwdXNoIiwiaGFuZGxlU2VsZWN0IiwiaXRlbSIsImdpdEFsbEZpbGVzU3RhdHVzIiwic29tZVVuc3RhZ2VkRmlsZXMiLCJyZWR1Y2UiLCJwcmV2Iiwic3RhdHVzIiwiZ2l0RmlsZVN0YXR1cyIsImNyZWF0ZUVsZW1lbnQiLCJmbGV4RGlyZWN0aW9uIiwibWFyZ2luTGVmdCIsImRpc3BsYXlEaXJlY3Rpb24iLCJpdGVtcyIsIm9uU2VsZWN0IiwiY29sb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiU3RhZ2VDaGFuZ2VzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IFRleHQsIEJveCwgTmV3bGluZSwgdXNlRm9jdXMsIHVzZUZvY3VzTWFuYWdlciB9ID0gcmVxdWlyZShcImlua1wiKTtcbi8vIGNvbnN0IFNlbGVjdElucHV0ID0gcmVxdWlyZShcImluay1zZWxlY3QtaW5wdXRcIikuZGVmYXVsdDtcbmNvbnN0IFNlbGVjdElucHV0ID0gcmVxdWlyZShcImluay1zZWxlY3QtaW5wdXQtaG9yaXpvbnRhbFwiKS5kZWZhdWx0O1xuY29uc3QgeyBleGVjU3luYywgZXhlYyB9ID0gcmVxdWlyZShcImNoaWxkX3Byb2Nlc3NcIik7XG5cbmNvbnN0IFN0YWdlQ2hhbmdlcyA9ICh7cmVmcmVzaFRhYiwgYWNjZW50Q29sb3IsIGRlZmF1bHRDb2xvcn0pID0+IHtcbi8vU3RhZ2VzL3Vuc3RhZ2VzIGNoYW5nZXNcblx0Y29uc3QgW2dpdFN0YXR1cywgc2V0U3RhdHVzXSA9IHVzZVN0YXRlKCcnKVxuXHRjb25zdCB7aXNGb2N1c2VkfSA9IHVzZUZvY3VzKCk7XG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRsZXQgZ2l0U3RhdHVzT3V0cHV0ID0gZXhlY1N5bmMoXG5cdFx0XHRcImdpdCBzdGF0dXMgLXNcIixcblx0XHRcdChlcnJvciwgc3Rkb3V0LCBzdGRlcnIpID0+IHtcblx0XHRcdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihgZXhlYyBlcnJvcjogJHtlcnJvcn1gKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHN0ZG91dDtcblx0XHRcdH1cblx0XHQpLnRvU3RyaW5nKCk7XG5cblx0XHRzZXRTdGF0dXMoZ2l0U3RhdHVzT3V0cHV0KVxuXG5cdH0pXG5cblxuXHRjb25zdCBmaWxlc0xpc3QgPSBbe2xhYmVsOidTVEFHRS9VTlNUQUdFIChhbGwgZmlsZXMpJywgdmFsdWU6ICdTVEFHRS9VTlNUQUdFIChhbGwgZmlsZXMpJ31dXG5cblx0Z2l0U3RhdHVzLnNwbGl0KFwiXFxuXCIpLmZvckVhY2goKGZpbGUsIGkpID0+IHtcblx0XHRpZiAoZmlsZS5sZW5ndGgpIHtcblx0XHRcdGlmIChmaWxlLmluY2x1ZGVzKCcgLT4gJykpIHtcblx0XHRcdFx0Y29uc3QgZmlsZXMgPSBmaWxlLnNsaWNlKDMpLnNwbGl0KCcgLT4gJykuZm9yRWFjaCgoaW5uZXJmaWxlLCBqKSA9PiB7XG5cdFx0XHRcdFx0ZmlsZXNMaXN0LnB1c2goe2xhYmVsOiBpbm5lcmZpbGUsIHZhbHVlOiBpICsgaiAqIC4xIH0pXG5cdFx0XHRcdH0pXG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZpbGVzTGlzdC5wdXNoKHtsYWJlbDogZmlsZS5zbGljZSgzKSwgdmFsdWU6IGl9KVxuXHRcdFx0fVxuXHRcdH1cblx0fSlcblxuXHRjb25zdCBoYW5kbGVTZWxlY3QgPSAoaXRlbSkgPT4ge1xuXG5cblx0XHRpZiAoaXRlbS5sYWJlbCA9PT0gJ1NUQUdFL1VOU1RBR0UgKGFsbCBmaWxlcyknKSB7XG5cdFx0XHRsZXQgZ2l0QWxsRmlsZXNTdGF0dXMgPSBleGVjU3luYyhcblx0XHRcdFx0YGdpdCBzdGF0dXMgLXNgLFxuXHRcdFx0XHQoZXJyb3IsIHN0ZG91dCwgc3RkZXJyKSA9PiB7XG5cdFx0XHRcdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKGBleGVjIGVycm9yOiAke2Vycm9yfWApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gc3Rkb3V0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdCkudG9TdHJpbmcoKS5zcGxpdChcIlxcblwiKVxuXG5cdFx0XHRcdGNvbnN0IHNvbWVVbnN0YWdlZEZpbGVzID0gZ2l0QWxsRmlsZXNTdGF0dXMucmVkdWNlKChwcmV2LCBzdGF0dXMpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gKHByZXYgfHwgKHN0YXR1cy5sZW5ndGggJiYgc3RhdHVzLnNsaWNlKDEsMikgIT09ICcgJykpXG5cdFx0XHRcdH0sIGZhbHNlKVxuXG5cdFx0XHRcdGlmIChzb21lVW5zdGFnZWRGaWxlcykge1xuXHRcdFx0XHRcdGV4ZWNTeW5jKGBnaXQgYWRkIC5gKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGV4ZWNTeW5jKCdnaXQgcmVzdG9yZSAtLXN0YWdlZCAuJylcblx0XHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxldCBnaXRGaWxlU3RhdHVzID0gZXhlY1N5bmMoXG5cdFx0XHRcdFx0YGdpdCBzdGF0dXMgLXMgJHtpdGVtLmxhYmVsfWAsXG5cdFx0XHRcdFx0KGVycm9yLCBzdGRvdXQsIHN0ZGVycikgPT4ge1xuXHRcdFx0XHRcdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoYGV4ZWMgZXJyb3I6ICR7ZXJyb3J9YCk7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiBzdGRvdXQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCkudG9TdHJpbmcoKS5zbGljZSgwLDEpO1xuXG5cdFx0XHRcdFx0aWYgKGdpdEZpbGVTdGF0dXMgPT09ICdNJyB8fCBnaXRGaWxlU3RhdHVzID09PSAnQScgfHwgZ2l0RmlsZVN0YXR1cyA9PT0gJ1InIHx8IGdpdEZpbGVTdGF0dXMgPT09ICdEJykge1xuXHRcdFx0XHRcdFx0ZXhlY1N5bmMoYGdpdCByZXN0b3JlIC0tc3RhZ2VkICR7aXRlbS5sYWJlbH1gKVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRleGVjU3luYyhgZ2l0IGFkZCAke2l0ZW0ubGFiZWx9YClcblx0XHRcdFx0fVxuXHRcdH1cblxuXHR9O1xuXG5cdHJldHVybiAoXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCIgbWFyZ2luTGVmdD0nMycgPlxuXHRcdFx0PFNlbGVjdElucHV0IGRpc3BsYXlEaXJlY3Rpb249XCJjb2x1bW5cIiBpdGVtcz17ZmlsZXNMaXN0fSBvblNlbGVjdD17aGFuZGxlU2VsZWN0fSBkZWZhdWx0Q29sb3I9e2RlZmF1bHRDb2xvcn0gYWNjZW50Q29sb3I9e2FjY2VudENvbG9yfSAvPlxuXHRcdFx0PE5ld2xpbmUgLz5cblx0XHRcdDxUZXh0IGNvbG9yPSdncmF5Jz5QcmVzcyBFU0MgdG8gZ28gYmFjazwvVGV4dD5cblx0XHQ8L0JveD5cblx0KVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdGFnZUNoYW5nZXM7XG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVDLFNBQVM7RUFBRUM7QUFBUyxDQUFDLEdBQUdGLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDaEQsTUFBTTtFQUFFRyxJQUFJO0VBQUVDLEdBQUc7RUFBRUMsT0FBTztFQUFFQyxRQUFRO0VBQUVDO0FBQWdCLENBQUMsR0FBR1AsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUN4RTtBQUNBLE1BQU1RLFdBQVcsR0FBR1IsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUNTLE9BQU87QUFDbEUsTUFBTTtFQUFFQyxRQUFRO0VBQUVDO0FBQUssQ0FBQyxHQUFHWCxPQUFPLENBQUMsZUFBZSxDQUFDO0FBRW5ELE1BQU1ZLFlBQVksR0FBR0EsQ0FBQztFQUFDQyxVQUFVO0VBQUVDLFdBQVc7RUFBRUM7QUFBWSxDQUFDLEtBQUs7RUFDbEU7RUFDQyxNQUFNLENBQUNDLFNBQVMsRUFBRUMsU0FBUyxDQUFDLEdBQUdmLFFBQVEsQ0FBQyxFQUFFLENBQUM7RUFDM0MsTUFBTTtJQUFDZ0I7RUFBUyxDQUFDLEdBQUdaLFFBQVEsQ0FBQyxDQUFDO0VBRTlCTCxTQUFTLENBQUMsTUFBTTtJQUNmLElBQUlrQixlQUFlLEdBQUdULFFBQVEsQ0FDN0IsZUFBZSxFQUNmLENBQUNVLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxNQUFNLEtBQUs7TUFDMUIsSUFBSUYsS0FBSyxFQUFFO1FBQ1ZHLE9BQU8sQ0FBQ0gsS0FBSyxDQUFDLGVBQWVBLEtBQUssRUFBRSxDQUFDO1FBQ3JDO01BQ0Q7TUFDQSxPQUFPQyxNQUFNO0lBQ2QsQ0FDRCxDQUFDLENBQUNHLFFBQVEsQ0FBQyxDQUFDO0lBRVpQLFNBQVMsQ0FBQ0UsZUFBZSxDQUFDO0VBRTNCLENBQUMsQ0FBQztFQUdGLE1BQU1NLFNBQVMsR0FBRyxDQUFDO0lB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