const React = require("react");
const {
  useState,
  useEffect
} = require("react");
const {
  Box,
  useInput,
  useFocus,
  useFocusManager
} = require("ink");
const SelectInput = require("ink-select-input-horizontal").default;
const importJsx = require("import-jsx");
const TreeTab = importJsx('./components/TreeTab');
const revertTab = require("./actions/revertStaged");
const stageFiles = require("./actions/stageFiles");
const pushTab = require("./actions/pushTab");
const pullTab = require("./actions/pullBranch");
const CheckoutBranch = importJsx("./components/CheckoutBranch");
const CommitAction = importJsx("./components/Commit");
const StageSomeFiles = importJsx('./components/StageChanges');
const Drop = importJsx('./components/DropDownOther');
const DeleteTab = importJsx("./components/DeleteBranch");
const Selector = ({
  defaultColor,
  accentColor
}) => {
  const [currentTab, setCurrentTab] = useState("");
  let {
    isFocused
  } = useFocus();
  const {
    disableFocus,
    enableFocus
  } = useFocusManager();
  useInput((input, key) => {
    if (key.escape) {
      return setCurrentTab("");
    }
  });
  const handleSelect = item => {
    setCurrentTab(item.value);
    if (item.value === "pushStagedChanges") {
      pushTab();
    }
    if (item.value === "stageAll") {
      stageFiles();
    }
    if (item.value === "revertStagedChanges") {
      revertTab();
    }
    if (item.value === "pullFromBranch") {
      pullTab();
    }
    if (item.value === 'stageSome') {
      isFocused = true;
    }
  };
  const items = [{
    label: "Stage Changes",
    value: "stageSome"
  }, {
    label: "Commit Changes",
    value: "commitChanges"
  }, {
    label: "Push Staged Changes",
    value: "pushStagedChanges"
  }, {
    label: "Pull From Branch",
    value: "pullFromBranch"
  }, {
    label: "Checkout Branch",
    value: "checkoutBranch"
  }, {
    label: "Delete Branch",
    value: "deleteBranch"
  }, {
    label: 'Other',
    value: 'other'
  }];
  switch (currentTab) {
    case "checkoutBranch":
      return /*#__PURE__*/React.createElement(Box, {
        flexDirection: "column"
      }, /*#__PURE__*/React.createElement(SelectInput, {
        items: items,
        isFocused: false,
        defaultColor: defaultColor,
        accentColor: accentColor
      }), /*#__PURE__*/React.createElement(CheckoutBranch, {
        refreshTab: setCurrentTab
      }));
    case "commitChanges":
      return /*#__PURE__*/React.createElement(Box, {
        flexDirection: "column"
      }, /*#__PURE__*/React.createElement(SelectInput, {
        items: items,
        isFocused: false,
        defaultColor: defaultColor,
        accentColor: accentColor
      }), /*#__PURE__*/React.createElement(CommitAction, {
        refreshTab: setCurrentTab
      }));
    case 'stageSome':
      return /*#__PURE__*/React.createElement(Box, {
        flexDirection: "column"
      }, /*#__PURE__*/React.createElement(SelectInput, {
        items: items,
        isFocused: false,
        defaultColor: defaultColor,
        accentColor: accentColor
      }), /*#__PURE__*/React.createElement(StageSomeFiles, {
        refreshTab: setCurrentTab,
        defaultColor: defaultColor,
        accentColor: accentColor
      }));
    case 'deleteBranch':
      return /*#__PURE__*/React.createElement(Box, {
        flexDirection: "column"
      }, /*#__PURE__*/React.createElement(SelectInput, {
        items: items,
        isFocused: false,
        defaultColor: defaultColor,
        accentColor: accentColor
      }), /*#__PURE__*/React.createElement(DeleteTab, {
        refreshTab: setCurrentTab
      }));
    case 'other':
      return /*#__PURE__*/React.createElement(Box, {
        flexDirection: "column"
      }, /*#__PURE__*/React.createElement(SelectInput, {
        items: items,
        isFocused: false,
        defaultColor: defaultColor,
        accentColor: accentColor
      }), /*#__PURE__*/React.createElement(Drop, {
        refreshTab: setCurrentTab,
        defaultColor: defaultColor,
        accentColor: accentColor
      }));
    default:
      return /*#__PURE__*/React.createElement(SelectInput, {
        items: items,
        defaultColor: defaultColor,
        accentColor: accentColor,
        onSelect: handleSelect
      });
  }
};
module.exports = Selector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,