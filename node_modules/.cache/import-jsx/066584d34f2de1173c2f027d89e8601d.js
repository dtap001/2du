const React = require('react');
const {
  useState
} = require("react");
const {
  Box,
  Text,
  NewLine
} = require('ink');
const {
  execSync,
  exec
} = require("child_process");
const TextInput = require("ink-text-input").default;
const CommitRevert = props => {
  const [commitId, setCommitId] = useState("");
  let {
    refreshTab
  } = props;

  //reverts merge based on git log merge-id
  let singleBranch = execSync(
  //most recent commit id
  'git log --all --decorate --oneline --graph').toString().split('\n', 1);
  const branchRevert = () => {
    //reverts commit
    try {
      execSync(`git revert -m 1 ${commitId}`);
    } catch (error) {
      console.error('Oops, something went wrong.');
    }
  };
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, " ")), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
    color: "redBright"
  }, "   THIS WILL DELETE ALL FILES/CHANGES MADE IN THIS COMMIT ")), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, /*#__PURE__*/React.createElement(Text, null, "   Latest Commit Id: "), /*#__PURE__*/React.createElement(Text, {
    color: "#f09e8c"
  }, singleBranch)), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "row"
  }, /*#__PURE__*/React.createElement(Text, null, "   Please enter your commit Id: "), /*#__PURE__*/React.createElement(TextInput, {
    value: commitId,
    onChange: setCommitId,
    onSubmit: branchRevert
  })), /*#__PURE__*/React.createElement(Text, {
    color: "gray"
  }, "   Press ESC to go back "));
};
module.exports = CommitRevert;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsIkJveCIsIlRleHQiLCJOZXdMaW5lIiwiZXhlY1N5bmMiLCJleGVjIiwiVGV4dElucHV0IiwiZGVmYXVsdCIsIkNvbW1pdFJldmVydCIsInByb3BzIiwiY29tbWl0SWQiLCJzZXRDb21taXRJZCIsInJlZnJlc2hUYWIiLCJzaW5nbGVCcmFuY2giLCJ0b1N0cmluZyIsInNwbGl0IiwiYnJhbmNoUmV2ZXJ0IiwiZXJyb3IiLCJjb25zb2xlIiwiY3JlYXRlRWxlbWVudCIsImZsZXhEaXJlY3Rpb24iLCJjb2xvciIsInZhbHVlIiwib25DaGFuZ2UiLCJvblN1Ym1pdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJDb21taXRSZXZlcnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpXG5jb25zdCB7IHVzZVN0YXRlIH0gPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IEJveCwgVGV4dCwgTmV3TGluZSB9ID0gcmVxdWlyZSgnaW5rJylcbmNvbnN0IHsgZXhlY1N5bmMsIGV4ZWMgfSA9cmVxdWlyZShcImNoaWxkX3Byb2Nlc3NcIilcbmNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoXCJpbmstdGV4dC1pbnB1dFwiKS5kZWZhdWx0O1xuXG5jb25zdCBDb21taXRSZXZlcnQgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCBbY29tbWl0SWQsIHNldENvbW1pdElkXSA9IHVzZVN0YXRlKFwiXCIpO1xuXG4gICAgbGV0IHsgcmVmcmVzaFRhYiB9ID0gcHJvcHM7XG5cbiAgICAvL3JldmVydHMgbWVyZ2UgYmFzZWQgb24gZ2l0IGxvZyBtZXJnZS1pZFxuICAgIGxldCBzaW5nbGVCcmFuY2ggPSBleGVjU3luYyhcbiAgICAgICAgLy9tb3N0IHJlY2VudCBjb21taXQgaWRcbiAgICAgICAgJ2dpdCBsb2cgLS1hbGwgLS1kZWNvcmF0ZSAtLW9uZWxpbmUgLS1ncmFwaCdcbiAgICAgICAgKS50b1N0cmluZygpLnNwbGl0KCdcXG4nLCAxKVxuICAgIGNvbnN0IGJyYW5jaFJldmVydCA9ICgpID0+IHtcbiAgICAgICAgLy9yZXZlcnRzIGNvbW1pdFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZXhlY1N5bmMoYGdpdCByZXZlcnQgLW0gMSAke2NvbW1pdElkfWApXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdPb3BzLCBzb21ldGhpbmcgd2VudCB3cm9uZy4nKVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICAgIDxCb3ggZmxleERpcmVjdGlvbj0nY29sdW1uJz5cbiAgICAgICAgICAgIDxCb3g+PFRleHQ+IDwvVGV4dD48L0JveD5cbiAgICAgICAgICAgIHsvKiA8Qm94PjxUZXh0PiAgIFBsZWFzZSBiZSBvbiBtYXN0ZXIgYnJhbmNoLiA8L1RleHQ+PC9Cb3g+ICovfVxuICAgICAgICAgICAgPEJveD48VGV4dCBjb2xvcj0ncmVkQnJpZ2h0Jz4gICBUSElTIFdJTEwgREVMRVRFIEFMTCBGSUxFUy9DSEFOR0VTIE1BREUgSU4gVEhJUyBDT01NSVQgPC9UZXh0PjwvQm94PlxuICAgICAgICAgICAgPEJveCBmbGV4RGlyZWN0aW9uPSdyb3cnPlxuICAgICAgICAgICAgICAgIDxUZXh0PiAgIExhdGVzdCBDb21taXQgSWQ6IDwvVGV4dD4gXG4gICAgICAgICAgICAgICAgPFRleHQgY29sb3I9JyNmMDllOGMnPntzaW5nbGVCcmFuY2h9PC9UZXh0PlxuICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICA8Qm94IGZsZXhEaXJlY3Rpb249J3Jvdyc+XG4gICAgICAgICAgICAgICAgPFRleHQ+ICAgUGxlYXNlIGVudGVyIHlvdXIgY29tbWl0IElkOiA8L1RleHQ+XG4gICAgICAgICAgICAgICAgPFRleHRJbnB1dCBcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2NvbW1pdElkfVxuXHRcdFx0XHRcdG9uQ2hhbmdlPXtzZXRDb21taXRJZH1cblx0XHRcdFx0XHRvblN1Ym1pdD17YnJhbmNoUmV2ZXJ0fSAvPlxuICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICA8VGV4dCBjb2xvcj0nZ3JheSc+ICAgUHJlc3MgRVNDIHRvIGdvIGJhY2sgPC9UZXh0PlxuICAgICAgICA8L0JveD5cbiAgICApXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tbWl0UmV2ZXJ0Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFFQztBQUFTLENBQUMsR0FBR0QsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUNyQyxNQUFNO0VBQUVFLEdBQUc7RUFBRUMsSUFBSTtFQUFFQztBQUFRLENBQUMsR0FBR0osT0FBTyxDQUFDLEtBQUssQ0FBQztBQUM3QyxNQUFNO0VBQUVLLFFBQVE7RUFBRUM7QUFBSyxDQUFDLEdBQUVOLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFDbEQsTUFBTU8sU0FBUyxHQUFHUCxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQ1EsT0FBTztBQUVuRCxNQUFNQyxZQUFZLEdBQUlDLEtBQUssSUFBSztFQUM1QixNQUFNLENBQUNDLFFBQVEsRUFBRUMsV0FBVyxDQUFDLEdBQUdYLFFBQVEsQ0FBQyxFQUFFLENBQUM7RUFFNUMsSUFBSTtJQUFFWTtFQUFXLENBQUMsR0FBR0gsS0FBSzs7RUFFMUI7RUFDQSxJQUFJSSxZQUFZLEdBQUdULFFBQVE7RUFDdkI7RUFDQSw0Q0FDQSxDQUFDLENBQUNVLFFBQVEsQ0FBQyxDQUFDLENBQUNDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0VBQy9CLE1BQU1DLFlBQVksR0FBR0EsQ0FBQSxLQUFNO0lBQ3ZCO0lBQ0EsSUFBSTtNQUNBWixRQUFRLENBQUMsbUJBQW1CTSxRQUFRLEVBQUUsQ0FBQztJQUMzQyxDQUFDLENBQUMsT0FBT08sS0FBSyxFQUFFO01BQ1pDLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLDZCQUE2QixDQUFDO0lBQ2hEO0VBQ0osQ0FBQztFQUNELG9CQUNJbkIsS0FBQSxDQUFBcUIsYUFBQSxDQUFDbEIsR0FBRztJQUFDbUIsYUFBYSxFQUFDO0VBQVEsZ0JBQ3ZCdEIsS0FBQSxDQUFBcUIsYUFBQSxDQUFDbEIsR0FBRyxxQkFBQ0gsS0FBQSxDQUFBcUIsYUFBQSxDQUFDakIsSUFBSSxRQUFDLEdBQU8sQ0FBTSxDQUFDLGVBRXpCSixLQUFBLENBQUFxQixhQUFBLENBQUNsQixHQUFHLHFCQUFDSCxLQUFBLENBQUFxQixhQUFBLENBQUNqQixJQUFJO0lBQUNtQixLQUFLLEVBQUM7RUFBVyxHQUFDLDREQUFnRSxDQUFNLENBQUMsZUFDcEd2QixLQUFBLENBQUFxQixhQUFBLENBQUNsQixHQUFHO0lBQUNtQixhQUFhLEVBQUM7RUFBSyxnQkFDcEJ0QixLQUFBLENBQUFxQixhQUFBLENBQUNqQixJQUFJLFFBQUMsdUJBQTJCLENBQUMsZUFDbENKLEtBQUEsQ0FBQXFCLGFBQUEsQ0FBQ2pCLElBQUk7SUFBQ21CLEtBQUssRUFBQztFQUFTLEdBQUVSLFlBQW1CLENBQ3pDLENBQUMsZUFDTmYsS0FBQSxDQUFBcUIsYUFBQSxDQUFDbEIsR0FBRztJQUFDbUIsYUFBYSxFQUFDO0VBQUssZ0JBQ3BCdEIsS0FBQSxDQUFBcUIsYUFBQSxDQUFDakIsSUFBSSxRQUFDLGtDQUFzQyxDQUFDLGVBQzdDSixLQUFBLENBQUFxQixhQUFBLENBQUNiLFNBQVM7SUFDTmdCLEtBQUssRUFBRVosUUFBUztJQUMvQmEsUUFBUSxFQUFFWixXQUFZO0lBQ3RCYSxRQUFRLEVBQUVSO0VBQWEsQ0FBRSxDQUNiLENBQUMsZUFDTmxCLEtBQUEsQ0FBQXFCLGFBQUEsQ0FBQ2pCLElBQUk7SUFBQ21CLEtBQUssRUFBQztFQUFNLEdBQUMsMEJBQThCLENBQ2hELENBQUM7QUFFZCxDQUFDO0FBRURJLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHbEIsWUFBWSIsImlnbm9yZUxpc3QiOltdfQ==