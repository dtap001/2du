const React = require("react");
const {
  useState
} = require("react");
const {
  render,
  Box,
  Text,
  Newline
} = require("ink");
const {
  execSync
} = require("child_process");
const TextInput = require("ink-text-input").default;
const {
  defaultColor,
  accentColor
} = require('../styleFile');
//Uses git for-each-ref to display all available branches to checkout to
//Also removes the astrix that displays the current branch you are on
//since it is not necessary here.

const CheckoutBranch = props => {
  const [query, setQuery] = useState("");
  let {
    refreshTab
  } = props;
  let branches = execSync("git for-each-ref --format='%(refname:short)' refs/heads/").toString().split("\n");
  const checkoutBranch = query => {
    if (branches.includes(query)) {
      try {
        //checks out to an existing local branch
        execSync(`git checkout ${query}`);
        refreshTab("");
      } catch (error) {}
    } else {
      //creates a new branch if the query isn't already local
      execSync(`git checkout -b ${query}`);
      refreshTab("");
    }
  };
  let holder = '';
  let func = input => {
    holder = input;
  };
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, " ")), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
    color: accentColor
  }, " Branches: "), /*#__PURE__*/React.createElement(Text, {
    color: defaultColor
  }, branches.join("  "))), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Box, {
    marginRight: 1
  }, /*#__PURE__*/React.createElement(Text, {
    color: accentColor
  }, " Checkout branch:")), /*#__PURE__*/React.createElement(TextInput, {
    color: defaultColor,
    value: query,
    onChange: setQuery,
    onSubmit: checkoutBranch
  })), /*#__PURE__*/React.createElement(Box, {
    marginLeft: 1
  }, /*#__PURE__*/React.createElement(Text, {
    color: "grey"
  }, "Press ESC to go back")));
};
module.exports = CheckoutBranch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInJlbmRlciIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwiZXhlY1N5bmMiLCJUZXh0SW5wdXQiLCJkZWZhdWx0IiwiZGVmYXVsdENvbG9yIiwiYWNjZW50Q29sb3IiLCJDaGVja291dEJyYW5jaCIsInByb3BzIiwicXVlcnkiLCJzZXRRdWVyeSIsInJlZnJlc2hUYWIiLCJicmFuY2hlcyIsInRvU3RyaW5nIiwic3BsaXQiLCJjaGVja291dEJyYW5jaCIsImluY2x1ZGVzIiwiZXJyb3IiLCJob2xkZXIiLCJmdW5jIiwiaW5wdXQiLCJjcmVhdGVFbGVtZW50IiwiZmxleERpcmVjdGlvbiIsImNvbG9yIiwiam9pbiIsIm1hcmdpblJpZ2h0IiwidmFsdWUiLCJvbkNoYW5nZSIsIm9uU3VibWl0IiwibWFyZ2luTGVmdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJDaGVja291dEJyYW5jaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlU3RhdGUgfSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgcmVuZGVyLCBCb3gsIFRleHQsIE5ld2xpbmUgfSA9IHJlcXVpcmUoXCJpbmtcIik7XG5jb25zdCB7IGV4ZWNTeW5jIH0gPSByZXF1aXJlKFwiY2hpbGRfcHJvY2Vzc1wiKTtcbmNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoXCJpbmstdGV4dC1pbnB1dFwiKS5kZWZhdWx0O1xuY29uc3Qge2RlZmF1bHRDb2xvciwgYWNjZW50Q29sb3J9ID0gcmVxdWlyZSgnLi4vc3R5bGVGaWxlJylcbi8vVXNlcyBnaXQgZm9yLWVhY2gtcmVmIHRvIGRpc3BsYXkgYWxsIGF2YWlsYWJsZSBicmFuY2hlcyB0byBjaGVja291dCB0b1xuLy9BbHNvIHJlbW92ZXMgdGhlIGFzdHJpeCB0aGF0IGRpc3BsYXlzIHRoZSBjdXJyZW50IGJyYW5jaCB5b3UgYXJlIG9uXG5cdC8vc2luY2UgaXQgaXMgbm90IG5lY2Vzc2FyeSBoZXJlLlxuXG5jb25zdCBDaGVja291dEJyYW5jaCA9IChwcm9wcykgPT4ge1xuXHRjb25zdCBbcXVlcnksIHNldFF1ZXJ5XSA9IHVzZVN0YXRlKFwiXCIpO1xuXG5cdGxldCB7IHJlZnJlc2hUYWIgfSA9IHByb3BzO1xuXG5cdGxldCBicmFuY2hlcyA9IGV4ZWNTeW5jKFxuXHRcdFwiZ2l0IGZvci1lYWNoLXJlZiAtLWZvcm1hdD0nJShyZWZuYW1lOnNob3J0KScgcmVmcy9oZWFkcy9cIlxuXHQpXG5cdFx0LnRvU3RyaW5nKClcblx0XHQuc3BsaXQoXCJcXG5cIik7XG5cblx0Y29uc3QgY2hlY2tvdXRCcmFuY2ggPSAocXVlcnkpID0+IHtcblx0XHRpZiAoYnJhbmNoZXMuaW5jbHVkZXMocXVlcnkpKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHQvL2NoZWNrcyBvdXQgdG8gYW4gZXhpc3RpbmcgbG9jYWwgYnJhbmNoXG5cdFx0XHRcdGV4ZWNTeW5jKGBnaXQgY2hlY2tvdXQgJHtxdWVyeX1gKTtcblx0XHRcdFx0cmVmcmVzaFRhYihcIlwiKTtcblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvL2NyZWF0ZXMgYSBuZXcgYnJhbmNoIGlmIHRoZSBxdWVyeSBpc24ndCBhbHJlYWR5IGxvY2FsXG5cdFx0XHRleGVjU3luYyhgZ2l0IGNoZWNrb3V0IC1iICR7cXVlcnl9YCk7XG5cdFx0XHRyZWZyZXNoVGFiKFwiXCIpO1xuXHRcdH1cblx0fTtcblx0bGV0IGhvbGRlciA9ICcnXG5cdFx0bGV0IGZ1bmMgPSAoaW5wdXQpID0+IHtcblx0XHRcdGhvbGRlciA9IGlucHV0XG5cdFx0fVxuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiPlxuXHRcdFx0PEJveD5cblx0XHRcdFx0PFRleHQ+IDwvVGV4dD5cblx0XHRcdDwvQm94PlxuXHRcdFx0PEJveD5cblx0XHRcdFx0PFRleHQgY29sb3I9e2FjY2VudENvbG9yfT4gQnJhbmNoZXM6IDwvVGV4dD5cblx0XHRcdFx0PFRleHQgY29sb3I9e2RlZmF1bHRDb2xvcn0+e2JyYW5jaGVzLmpvaW4oXCIgIFwiKX08L1RleHQ+XG5cdFx0XHQ8L0JveD5cblx0XHRcdDxCb3g+XG5cdFx0XHRcdDxCb3ggbWFyZ2luUmlnaHQ9ezF9PlxuXHRcdFx0XHRcdDxUZXh0IGNvbG9yPXthY2NlbnRDb2xvcn0+IENoZWNrb3V0IGJyYW5jaDo8L1RleHQ+XG5cdFx0XHRcdDwvQm94PlxuXHRcdFx0XHQ8VGV4dElucHV0XG5cdFx0XHRcdFx0Y29sb3I9e2RlZmF1bHRDb2xvcn1cblx0XHRcdFx0XHR2YWx1ZT17cXVlcnl9XG5cdFx0XHRcdFx0b25DaGFuZ2U9e3NldFF1ZXJ5fVxuXHRcdFx0XHRcdG9uU3VibWl0PXtjaGVja291dEJyYW5jaH1cblx0XHRcdFx0Lz5cblx0XHRcdDwvQm94PlxuXHRcdFx0PEJveCBtYXJnaW5MZWZ0PXsxfT5cblx0XHRcdFx0PFRleHQgY29sb3I9XCJncmV5XCI+UHJlc3MgRVNDIHRvIGdvIGJhY2s8L1RleHQ+XG5cdFx0XHQ8L0JveD5cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2hlY2tvdXRCcmFuY2g7XG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVDO0FBQVMsQ0FBQyxHQUFHRCxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQ3JDLE1BQU07RUFBRUUsTUFBTTtFQUFFQyxHQUFHO0VBQUVDLElBQUk7RUFBRUM7QUFBUSxDQUFDLEdBQUdMLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDckQsTUFBTTtFQUFFTTtBQUFTLENBQUMsR0FBR04sT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUM3QyxNQUFNTyxTQUFTLEdBQUdQLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDUSxPQUFPO0FBQ25ELE1BQU07RUFB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