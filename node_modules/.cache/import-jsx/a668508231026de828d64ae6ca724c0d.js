const React = require("react");
const {
  useState
} = require("react");
const {
  render,
  Box,
  Text,
  Newline
} = require("ink");
const {
  execSync
} = require("child_process");
const TextInput = require("ink-text-input").default;
const DeleteTab = props => {
  //Uses git branch and displays all local branches
  //Takes in an input to for delete branch

  const [del, setDelete] = useState("");
  let {
    refreshTab
  } = props;
  let branchList = execSync("git branch").toString().split("\n");
  let branches = branchList;
  const handleSubmit = () => {
    try {
      execSync("git branch -D " + del + "");
      refreshTab("");
    } catch (error) {}
  };
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, " ")), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
    color: "red"
  }, " Branches: "), /*#__PURE__*/React.createElement(Text, null, branches.join(" "))), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
    color: "red"
  }, " Delete Branch: "), /*#__PURE__*/React.createElement(TextInput, {
    value: del,
    onChange: setDelete,
    onSubmit: handleSubmit
  }))), /*#__PURE__*/React.createElement(Newline, null), /*#__PURE__*/React.createElement(Text, {
    color: "gray"
  }, " Press ESC to go back "));
};
module.exports = DeleteTab;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInJlbmRlciIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwiZXhlY1N5bmMiLCJUZXh0SW5wdXQiLCJkZWZhdWx0IiwiRGVsZXRlVGFiIiwicHJvcHMiLCJkZWwiLCJzZXREZWxldGUiLCJyZWZyZXNoVGFiIiwiYnJhbmNoTGlzdCIsInRvU3RyaW5nIiwic3BsaXQiLCJicmFuY2hlcyIsImhhbmRsZVN1Ym1pdCIsImVycm9yIiwiY3JlYXRlRWxlbWVudCIsImZsZXhEaXJlY3Rpb24iLCJjb2xvciIsImpvaW4iLCJ2YWx1ZSIsIm9uQ2hhbmdlIiwib25TdWJtaXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiRGVsZXRlQnJhbmNoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgeyB1c2VTdGF0ZSB9ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgeyByZW5kZXIsIEJveCwgVGV4dCwgTmV3bGluZSB9ID0gcmVxdWlyZShcImlua1wiKTtcbmNvbnN0IHsgZXhlY1N5bmMgfSA9IHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpO1xuY29uc3QgVGV4dElucHV0ID0gcmVxdWlyZShcImluay10ZXh0LWlucHV0XCIpLmRlZmF1bHQ7XG5cbmNvbnN0IERlbGV0ZVRhYiA9IChwcm9wcykgPT4ge1xuXHQvL1VzZXMgZ2l0IGJyYW5jaCBhbmQgZGlzcGxheXMgYWxsIGxvY2FsIGJyYW5jaGVzXG5cdC8vVGFrZXMgaW4gYW4gaW5wdXQgdG8gZm9yIGRlbGV0ZSBicmFuY2hcblxuXHRjb25zdCBbZGVsLCBzZXREZWxldGVdID0gdXNlU3RhdGUoXCJcIik7XG5cblx0bGV0IHsgcmVmcmVzaFRhYiB9ID0gcHJvcHM7XG5cblx0bGV0IGJyYW5jaExpc3QgPSBleGVjU3luYyhcImdpdCBicmFuY2hcIikudG9TdHJpbmcoKS5zcGxpdChcIlxcblwiKTtcblx0bGV0IGJyYW5jaGVzID0gYnJhbmNoTGlzdDtcblxuXHRjb25zdCBoYW5kbGVTdWJtaXQgPSAoKSA9PiB7XG5cdFx0dHJ5IHtcblx0XHRcdGV4ZWNTeW5jKFwiZ2l0IGJyYW5jaCAtRCBcIiArIGRlbCArIFwiXCIpO1xuXHRcdFx0cmVmcmVzaFRhYihcIlwiKTtcblx0XHR9IGNhdGNoIChlcnJvcikge31cblx0fTtcblx0cmV0dXJuIChcblx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIj5cblx0XHRcdDxCb3g+XG5cdFx0XHRcdDxUZXh0PiA8L1RleHQ+XG5cdFx0XHQ8L0JveD5cblx0XHRcdDxCb3g+XG5cdFx0XHRcdDxUZXh0IGNvbG9yPVwicmVkXCI+IEJyYW5jaGVzOiA8L1RleHQ+XG5cdFx0XHRcdDxUZXh0PnticmFuY2hlcy5qb2luKFwiIFwiKX08L1RleHQ+XG5cdFx0XHQ8L0JveD5cblx0XHRcdDxCb3g+XG5cdFx0XHRcdDxCb3g+XG5cdFx0XHRcdFx0PFRleHQgY29sb3I9XCJyZWRcIj4gRGVsZXRlIEJyYW5jaDogPC9UZXh0PlxuXHRcdFx0XHRcdDxUZXh0SW5wdXQgdmFsdWU9e2RlbH0gb25DaGFuZ2U9e3NldERlbGV0ZX0gb25TdWJtaXQ9e2hhbmRsZVN1Ym1pdH0gLz5cblx0XHRcdFx0PC9Cb3g+XG5cdFx0XHQ8L0JveD5cblx0XHRcdDxOZXdsaW5lIC8+XG5cdFx0XHQ8VGV4dCBjb2xvcj1cImdyYXlcIj4gUHJlc3MgRVNDIHRvIGdvIGJhY2sgPC9UZXh0PlxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZWxldGVUYWI7XG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVDO0FBQVMsQ0FBQyxHQUFHRCxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQ3JDLE1BQU07RUFBRUUsTUFBTTtFQUFFQyxHQUFHO0VBQUVDLElBQUk7RUFBRUM7QUFBUSxDQUFDLEdBQUdMLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDckQsTUFBTTtFQUFFTTtBQUFTLENBQUMsR0FBR04sT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUM3QyxNQUFNTyxTQUFTLEdBQUdQLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDUSxPQUFPO0FBRW5ELE1BQU1DLFNBQVMsR0FBSUMsS0FBSyxJQUFLO0VBQzVCO0VBQ0E7O0VBRUEsTUFBTSxDQUFDQyxHQUFHLEVBQUVDLFNBQVMsQ0FBQyxHQUFHWCxRQUFRLENBQUMsRUFBRSxDQUFDO0VBRXJDLElBQUk7SUFBRVk7RUFBVyxDQUFDLEdBQUdILEtBQUs7RUFFMUIsSUFBSUksVUFBVSxHQUFHUixRQUFRLENBQUMsWUFBWSxDQUFDLENBQUNTLFFBQVEsQ0FBQyxDQUFDLENBQUNDLEtBQUssQ0FBQyxJQUFJLENBQUM7RUFDOUQsSUFBSUMsUUFBUSxHQUFHSCxVQUFVO0VBRXpCLE1BQU1JLFlBQVksR0FBR0EsQ0FBQSxLQUFNO0lBQzFCLElBQUk7TUFDSFosUUFBUSxDQUFDLGdCQUFnQixHQUFHSyxHQUFHLEdBQUcsRUFBRSxDQUFDO01BQ3JDRSxVQUFVLENBQUMsRUFBRSxDQUFDO0lBQ2YsQ0FBQyxDQUFDLE9BQU9NLEtBQUssRUFBRSxDQUFDO0VBQ2xCLENBQUM7RUFDRCxvQkFDQ3BCLEtBQUEsQ0FBQXFCLGFBQUEsQ0FBQ2pCLEdBQUc7SUFBQ2tCLGFBQWEsRUFBQztFQUFRLGdCQUMxQnRCLEtBQUEsQ0FBQXFCLGFBQUEsQ0FBQ2pCLEdBQUcscUJBQ0hKLEtBQUEsQ0FBQXFCLGFBQUEsQ0FBQ2hCLElBQUksUUFBQyxHQUFPLENBQ1QsQ0FBQyxlQUNOTCxLQUFBLENBQUFxQixhQUFBLENBQUNqQixHQUFHLHFCQUNISixLQUFBLENBQUFxQixhQUFBLENBQUNoQixJQUFJO0lBQUNrQixLQUFLLEVBQUM7RUFBSyxHQUFDLGFBQWlCLENBQUMsZUFDcEN2QixLQUFBLENBQUFxQixhQUFBLENBQUNoQixJQUFJLFFBQUVhLFFBQVEsQ0FBQ00sSUFBSSxDQUFDLEdBQUcsQ0FBUSxDQUM1QixDQUFDLGVBQ054QixLQUFBLENBQUFxQixhQUFBLENBQUNqQixHQUFHLHFCQUNISixLQUFBLENBQUFxQixhQUFBLENBQUNqQixHQUFHLHFCQUNISixLQUFBLENBQUFxQixhQUFBLENBQUNoQixJQUFJO0lBQUNrQixLQUFLLEVBQUM7RUFBSyxHQUFDLGtCQUFzQixDQUFDLGVBQ3pDdkIsS0FBQSxDQUFBcUIsYUFBQSxDQUFDYixTQUFTO0lBQUNpQixLQUFLLEVBQUViLEdBQUk7SUFBQ2MsUUFBUSxFQUFFYixTQUFVO0lBQUNjLFFBQVEsRUFBRVI7RUFBYSxDQUFFLENBQ2pFLENBQ0QsQ0FBQyxlQUNObkIsS0FBQSxDQUFBcUIsYUFBQSxDQUFDZixPQUFPLE1BQUUsQ0FBQyxlQUNYTixLQUFBLENBQUFxQixhQUFBLENBQUNoQixJQUFJO0lBQUNrQixLQUFLLEVBQUM7RUFBTSxHQUFDLHdCQUE0QixDQUMzQyxDQUFDO0FBRVIsQ0FBQztBQUVESyxNQUFNLENBQUNDLE9BQU8sR0FBR25CLFNBQVMiLCJpZ25vcmVMaXN0IjpbXX0=