const React = require("react");
const {
  useEffect,
  useState,
  useRef
} = require("react");
const {
  Text,
  Box,
  Newline
} = require("ink");
const SelectInput = require("ink-select-input-horizontal").default;
const {
  execSync,
  exec
} = require("child_process");
const importJsx = require("import-jsx");
const TreeTab = importJsx('./TreeTab');
const Stash = importJsx('./Stash');
const CommitRevert = importJsx('./CommitRevert');
const popStash = require('../actions/undoStash');

//Creates the switch case for the 'Other' Tab.

const dropDown = ({
  refreshTab,
  accentColor,
  defaultColor
}) => {
  const [currentDrop, setCurrentDrop] = useState('');
  const handleSelect = item => {
    setCurrentDrop(item.value);
    if (item.value === 'undoStash') {
      popStash();
    }
  };
  const items = [{
    label: 'Access Full Log Tree',
    value: 'fullLogTree'
  }, {
    label: 'Stash Changes',
    value: 'stashChanges'
  }, {
    label: 'Undo Stash',
    value: 'undoStash'
  }, {
    label: 'Undo Commit',
    value: 'undoCommit'
  }];
  switch (currentDrop) {
    case 'fullLogTree':
      return /*#__PURE__*/React.createElement(Box, {
        flexDirection: "column",
        marginLeft: "109"
      }, /*#__PURE__*/React.createElement(SelectInput, {
        items: items,
        isFocused: false,
        displayDirection: "column",
        defaultColor: defaultColor,
        accentColor: accentColor
      }), /*#__PURE__*/React.createElement(TreeTab, {
        refreshTab: refreshTab
      }));
    case 'stashChanges':
      return /*#__PURE__*/React.createElement(Box, {
        flexDirection: "column",
        marginLeft: "109"
      }, /*#__PURE__*/React.createElement(SelectInput, {
        items: items,
        isFocused: false,
        displayDirection: "column",
        defaultColor: defaultColor,
        accentColor: accentColor
      }), /*#__PURE__*/React.createElement(Stash, {
        refreshTab: refreshTab
      }));
    case 'undoStash':
      return /*#__PURE__*/React.createElement(Box, {
        flexDirection: "column",
        marginLeft: "109"
      }, /*#__PURE__*/React.createElement(SelectInput, {
        items: items,
        isFocused: false,
        displayDirection: "column",
        defaultColor: defaultColor,
        accentColor: accentColor
      }), /*#__PURE__*/React.createElement("popStash", {
        refreshTab: refreshTab
      }));
    case 'undoCommit':
      return /*#__PURE__*/React.createElement(Box, {
        flexDirection: "column",
        marginLeft: "109"
      }, /*#__PURE__*/React.createElement(SelectInput, {
        items: items,
        isFocused: false,
        displayDirection: "column",
        defaultColor: defaultColor,
        accentColor: accentColor
      }), /*#__PURE__*/React.createElement(CommitRevert, {
        refreshTab: refreshTab
      }));
    default:
      return (
        /*#__PURE__*/
        // Replace "marginLeft='109'" for optimized solution later down the line.
        React.createElement(Box, {
          flexDirection: "column",
          marginLeft: "109"
        }, /*#__PURE__*/React.createElement(SelectInput, {
          items: items,
          onSelect: handleSelect,
          displayDirection: "column",
          defaultColor: defaultColor,
          accentColor: accentColor
        }), /*#__PURE__*/React.createElement(Newline, null), /*#__PURE__*/React.createElement(Text, {
          color: "gray"
        }, "Press ESC to go back"))
      );
  }
};
module.exports = dropDown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsInVzZVJlZiIsIlRleHQiLCJCb3giLCJOZXdsaW5lIiwiU2VsZWN0SW5wdXQiLCJkZWZhdWx0IiwiZXhlY1N5bmMiLCJleGVjIiwiaW1wb3J0SnN4IiwiVHJlZVRhYiIsIlN0YXNoIiwiQ29tbWl0UmV2ZXJ0IiwicG9wU3Rhc2giLCJkcm9wRG93biIsInJlZnJlc2hUYWIiLCJhY2NlbnRDb2xvciIsImRlZmF1bHRDb2xvciIsImN1cnJlbnREcm9wIiwic2V0Q3VycmVudERyb3AiLCJoYW5kbGVTZWxlY3QiLCJpdGVtIiwidmFsdWUiLCJpdGVtcyIsImxhYmVsIiwiY3JlYXRlRWxlbWVudCIsImZsZXhEaXJlY3Rpb24iLCJtYXJnaW5MZWZ0IiwiaXNGb2N1c2VkIiwiZGlzcGxheURpcmVjdGlvbiIsIm9uU2VsZWN0IiwiY29sb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiRHJvcERvd25PdGhlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlUmVmIH0gPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IFRleHQsIEJveCwgTmV3bGluZSB9ID0gcmVxdWlyZShcImlua1wiKTtcbmNvbnN0IFNlbGVjdElucHV0ID0gcmVxdWlyZShcImluay1zZWxlY3QtaW5wdXQtaG9yaXpvbnRhbFwiKS5kZWZhdWx0O1xuY29uc3QgeyBleGVjU3luYywgZXhlYyB9ID0gcmVxdWlyZShcImNoaWxkX3Byb2Nlc3NcIik7XG5jb25zdCBpbXBvcnRKc3ggPSByZXF1aXJlKFwiaW1wb3J0LWpzeFwiKTtcbmNvbnN0IFRyZWVUYWIgPSBpbXBvcnRKc3goJy4vVHJlZVRhYicpXG5jb25zdCBTdGFzaCA9IGltcG9ydEpzeCgnLi9TdGFzaCcpXG5jb25zdCBDb21taXRSZXZlcnQgPSBpbXBvcnRKc3goJy4vQ29tbWl0UmV2ZXJ0JylcblxuY29uc3QgcG9wU3Rhc2ggPSByZXF1aXJlKCcuLi9hY3Rpb25zL3VuZG9TdGFzaCcpXG5cbi8vQ3JlYXRlcyB0aGUgc3dpdGNoIGNhc2UgZm9yIHRoZSAnT3RoZXInIFRhYi5cblxuY29uc3QgZHJvcERvd24gPSAoeyByZWZyZXNoVGFiLCBhY2NlbnRDb2xvciwgZGVmYXVsdENvbG9yIH0pID0+IHtcbiAgICBjb25zdCBbY3VycmVudERyb3AsIHNldEN1cnJlbnREcm9wXSA9IHVzZVN0YXRlKCcnKVxuXG4gICAgY29uc3QgaGFuZGxlU2VsZWN0ID0gKGl0ZW0pID0+IHtcbiAgICAgICAgc2V0Q3VycmVudERyb3AoaXRlbS52YWx1ZSlcbiAgICAgICAgaWYoaXRlbS52YWx1ZSA9PT0gJ3VuZG9TdGFzaCcpIHtcbiAgICAgICAgICAgIHBvcFN0YXNoKClcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBpdGVtcyA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdBY2Nlc3MgRnVsbCBMb2cgVHJlZScsXG4gICAgICAgICAgICB2YWx1ZTogJ2Z1bGxMb2dUcmVlJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ1N0YXNoIENoYW5nZXMnLFxuICAgICAgICAgICAgdmFsdWU6ICdzdGFzaENoYW5nZXMnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnVW5kbyBTdGFzaCcsXG4gICAgICAgICAgICB2YWx1ZTogJ3VuZG9TdGFzaCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdVbmRvIENvbW1pdCcsXG4gICAgICAgICAgICB2YWx1ZTogJ3VuZG9Db21taXQnXG4gICAgICAgIH1cbiAgICBdXG4gICAgc3dpdGNoIChjdXJyZW50RHJvcCkge1xuICAgICAgICBjYXNlICdmdWxsTG9nVHJlZSc6XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxCb3ggZmxleERpcmVjdGlvbj0nY29sdW1uJyBtYXJnaW5MZWZ0PScxMDknPlxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0SW5wdXQgaXRlbXM9e2l0ZW1zfSBpc0ZvY3VzZWQ9e2ZhbHNlfSBkaXNwbGF5RGlyZWN0aW9uPSdjb2x1bW4nIGRlZmF1bHRDb2xvcj17ZGVmYXVsdENvbG9yfSBhY2NlbnRDb2xvcj17YWNjZW50Q29sb3J9Lz5cbiAgICAgICAgICAgICAgICAgICAgPFRyZWVUYWIgcmVmcmVzaFRhYj17cmVmcmVzaFRhYn0gLz5cbiAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgIClcbiAgICAgICAgY2FzZSAnc3Rhc2hDaGFuZ2VzJzpcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPEJveCBmbGV4RGlyZWN0aW9uPSdjb2x1bW4nIG1hcmdpbkxlZnQ9JzEwOSc+XG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3RJbnB1dCBpdGVtcz17aXRlbXN9IGlzRm9jdXNlZD17ZmFsc2V9IGRpc3BsYXlEaXJlY3Rpb249J2NvbHVtbicgZGVmYXVsdENvbG9yPXtkZWZhdWx0Q29sb3J9IGFjY2VudENvbG9yPXthY2NlbnRDb2xvcn0vPlxuICAgICAgICAgICAgICAgICAgICA8U3Rhc2ggcmVmcmVzaFRhYj17cmVmcmVzaFRhYn0gLz5cbiAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgIClcbiAgICAgICAgY2FzZSAndW5kb1N0YXNoJzogXG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxCb3ggZmxleERpcmVjdGlvbj0nY29sdW1uJyBtYXJnaW5MZWZ0PScxMDknPlxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0SW5wdXQgaXRlbXM9e2l0ZW1zfSBpc0ZvY3VzZWQ9e2ZhbHNlfSBkaXNwbGF5RGlyZWN0aW9uPSdjb2x1bW4nIGRlZmF1bHRDb2xvcj17ZGVmYXVsdENvbG9yfSBhY2NlbnRDb2xvcj17YWNjZW50Q29sb3J9Lz5cbiAgICAgICAgICAgICAgICAgICAgPHBvcFN0YXNoIHJlZnJlc2hUYWI9e3JlZnJlc2hUYWJ9IC8+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICApXG4gICAgICAgIGNhc2UgJ3VuZG9Db21taXQnOlxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8Qm94IGZsZXhEaXJlY3Rpb249J2NvbHVtbicgbWFyZ2luTGVmdD0nMTA5Jz5cbiAgICAgICAgICAgICAgICAgICAgPFNlbGVjdElucHV0IGl0ZW1zPXtpdGVtc30gaXNGb2N1c2VkPXtmYWxzZX0gZGlzcGxheURpcmVjdGlvbj0nY29sdW1uJyBkZWZhdWx0Q29sb3I9e2RlZmF1bHRDb2xvcn0gYWNjZW50Q29sb3I9e2FjY2VudENvbG9yfS8+XG4gICAgICAgICAgICAgICAgICAgIDxDb21taXRSZXZlcnQgcmVmcmVzaFRhYj17cmVmcmVzaFRhYn0gLz5cbiAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgIClcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgLy8gUmVwbGFjZSBcIm1hcmdpbkxlZnQ9JzEwOSdcIiBmb3Igb3B0aW1pemVkIHNvbHV0aW9uIGxhdGVyIGRvd24gdGhlIGxpbmUuXG4gICAgICAgICAgICAgICAgPEJveCBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCIgbWFyZ2luTGVmdD0nMTA5JyA+XG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3RJbnB1dCBpdGVtcz17aXRlbXN9IG9uU2VsZWN0PXtoYW5kbGVTZWxlY3R9IGRpc3BsYXlEaXJlY3Rpb249J2NvbHVtbicgZGVmYXVsdENvbG9yPXtkZWZhdWx0Q29sb3J9IGFjY2VudENvbG9yPXthY2NlbnRDb2xvcn0vPlxuICAgICAgICAgICAgICAgICAgICA8TmV3bGluZSAvPlxuICAgICAgICAgICAgICAgICAgICA8VGV4dCBjb2xvcj0nZ3JheSc+UHJlc3MgRVNDIHRvIGdvIGJhY2s8L1RleHQ+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICApXG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBkcm9wRG93blxuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFFQyxTQUFTO0VBQUVDLFFBQVE7RUFBRUM7QUFBTyxDQUFDLEdBQUdILE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDeEQsTUFBTTtFQUFFSSxJQUFJO0VBQUVDLEdBQUc7RUFBRUM7QUFBUSxDQUFDLEdBQUdOLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDN0MsTUFBTU8sV0FBVyxHQUFHUCxPQUFPLENBQUMsNkJBQTZCLENBQUMsQ0FBQ1EsT0FBTztBQUNsRSxNQUFNO0VBQUVDLFFBQVE7RUFBRUM7QUFBSyxDQUFDLEdBQUdWLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFDbkQsTUFBTVcsU0FBUyxHQUFHWCxPQUFPLENBQUMsWUFBWSxDQUFDO0FBQ3ZDLE1BQU1ZLE9BQU8sR0FBR0QsU0FBUyxDQUFDLFdBQVcsQ0FBQztBQUN0QyxNQUFNRSxLQUFLLEdBQUdGLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFDbEMsTUFBTUcsWUFBWSxHQUFHSCxTQUFTLENBQUMsZ0JBQWdCLENBQUM7QUFFaEQsTUFBTUksUUFBUSxHQUFHZixPQUFPLENBQUMsc0JBQXNCLENBQUM7O0FBRWhEOztBQUVBLE1BQU1nQixRQUFRLEdBQUdBLENBQUM7RUFBRUMsVUFBVTtFQUFFQyxXQUFXO0VBQUVDO0FBQWEsQ0FBQyxLQUFLO0VBQzVELE1BQU0sQ0FBQ0MsV0FBVyxFQUFFQyxjQUFjLENBQUMsR0FBR25CLFFBQVEsQ0FBQyxFQUFFLENBQUM7RUFFbEQsTUFBTW9CLFlBQVksR0FBSUMsSUFBSSxJQUFLO0lBQzNCRixjQUFjLENBQUNFLElBQUksQ0FBQ0MsS0FBSyxDQUFDO0lBQzFCLElBQUdELElBQUksQ0FB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